{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\WorkSpace\\\\NextJS\\\\next-course\\\\pages\\\\index.js\";\n// import { useEffect, useState } from \"react\";\nimport { MongoClient } from \"mongodb\";\nimport { Fragment } from \"react\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { Head } from \"next/Head\";\n\nconst HomePage = props => {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  //effect function will always render after rendering the component first, i.e it takes 2 renders.\n  // useEffect(() => {\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  // console.log(new Date().getTime());\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Meetup List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"browse meetup list in react!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}; //This is used to pre-render the data on every http request unlike getStaticProps\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n//This reserved function will run before returning the JSX of the component page\n//and will send the data via props to the component page which will help to pre-render\n//the data before the component execution\n\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\"mongodb+srv://Manish:Wichita@cluster0.gxuaa.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => {\n        return {\n          image: meetup.image,\n          title: meetup.title,\n          address: meetup.address,\n          id: meetup._id.toString()\n        };\n      })\n    },\n    revalidate: 10\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["E:/WorkSpace/NextJS/next-course/pages/index.js"],"names":["MongoClient","Fragment","MeetupList","Head","HomePage","props","meetups","getStaticProps","client","connect","db","meetupCollection","collection","find","toArray","close","map","meetup","image","title","address","id","_id","toString","revalidate"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,IAAT,QAAqB,WAArB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AAEA;AACA;AACA;AACA;AAEA;AAEA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAnBD,C,CAqBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,6FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMN,OAAO,GAAG,MAAMK,gBAAgB,CAACE,IAAjB,GAAwBC,OAAxB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AACA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,IAAY;AAC/B,eAAO;AACLC,UAAAA,KAAK,EAAED,MAAM,CAACC,KADT;AAELC,UAAAA,KAAK,EAAEF,MAAM,CAACE,KAFT;AAGLC,UAAAA,OAAO,EAAEH,MAAM,CAACG,OAHX;AAILC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJC,SAAP;AAMD,OAPQ;AADJ,KADF;AAWLC,IAAAA,UAAU,EAAE;AAXP,GAAP;AAaD;AAED,eAAepB,QAAf","sourcesContent":["// import { useEffect, useState } from \"react\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport { Fragment } from \"react\";\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\nimport { Head } from \"next/Head\";\r\n\r\nconst HomePage = (props) => {\r\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n  //effect function will always render after rendering the component first, i.e it takes 2 renders.\r\n  // useEffect(() => {\r\n  //   setLoadedMeetups(DUMMY_MEETUPS);\r\n  // }, []);\r\n\r\n  // console.log(new Date().getTime());\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>Meetup List</title>\r\n        <meta name=\"description\" content=\"browse meetup list in react!\" />\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />;\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n//This is used to pre-render the data on every http request unlike getStaticProps\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS,\r\n//     },\r\n//   };\r\n// }\r\n\r\n//This reserved function will run before returning the JSX of the component page\r\n//and will send the data via props to the component page which will help to pre-render\r\n//the data before the component execution\r\nexport async function getStaticProps() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Manish:Wichita@cluster0.gxuaa.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupCollection.find().toArray();\r\n\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => {\r\n        return {\r\n          image: meetup.image,\r\n          title: meetup.title,\r\n          address: meetup.address,\r\n          id: meetup._id.toString(),\r\n        };\r\n      }),\r\n    },\r\n    revalidate: 10,\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}